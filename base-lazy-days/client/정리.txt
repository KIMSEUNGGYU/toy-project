데이터 유형에 커스텀 훅을 쓰는 이유
- 다수의 부분에서 useQuery 를 호출해야하는 경우 재작성할 필요가 없음
- 다수의 useQuery 를 작성할 때 key가 헷가릴 수 있음.
- 사용하길 원하는 쿼리 함수를 혼동하는 위험도 없음.
- 따로 빼서 구현하기 때문에 추상화 개념도 적용되어 있음.

===

useIsFetching
- useIsFetching 의 반환값은 숫자로 isFetching 중인 수를 반환?
- 현재 가져오는 쿼리가 있는지 나타내는 방법

[+]
- 리액트 쿼리는 해당 탭(서비스 탭)을 클릭하면(윈도우로 다시 돌아올 때) 자체적으로 데이터를 다시 가져옴(리페치)

===

React Query 로 데이터를 미리 채우는 방법 (prefetchQuery)
- 사용자에게 보여주고 싶은 데이터가 있을 때, 캐시에 아직 데이터가 없는 경우 미리 데이터를 채울 수 있음.
- query 데이터를 캐시에 추가하느 ㄴ방법
  - prefetchQuery (queryClient) - 캐시 O
  - setQueryData (queryClient) - 캐시 O
  - placeholderData (useQuery) - 캐시 X
  - initialData (useQuery) - 캐시 O

===

prefetchQuery (개념)
- 사용자들이 액션하기 전에 필요한 데이터를 미리 가져오는 개념
- 한예를 들면 
  페이지 홈에서 treatments 탭을 높은 비율로 클릭한다면, 홈페이지 로드되면 미리 treatments 페이지의 데이터를 가져올 수 있음.
- flow
  1. 홈페이지 로딩 (prefetchQuery 로 treatments 데이터 요청)
  2. 사용자가 treatments 탭 클릭
  3. treatment 화면 전환
    이때, 1에서 prefetch 한 결과가
    1. 캐시 시간이 초과되지 않았다면 treatments 데이터가 캐시에 로드됨.
       뿐만 아니라, uesQuery 에서 새로운 데이터 가져옴.
       => 컴포넌트를 마운트하여 리페칭을 트리거했기 때문에 데이터가 만료되었다는 것을 알음.?
       => 리페칭 동안에 캐시 된 데이터를 사용자에게 보여줌.
    2. 캐시 시간이 지났다면 가비지 컬렉터에 의해 수집되고, useQuery 는 그동안 표시할 데이터 없이 데이터를 가져와야함.

===
useQuery 에 keepPreviousData 옵션
- keepPreviousData 가 true 인 경우, 쿼리 키가 변경될 때까지 이전의 모든 데이터가 그대로 유지됨.
- 자리 표시자로 사용함?

===
5장 정리
- 초기 데이터 채우고 옵션을 다룸 (프리페치, setQueryData(QueryClient), placeholderData(useQuery), initialData(useQuery))
- 프리페치 자세히 다룸
  => 캐시를 데이터로 채우는 방법
- 

===
select 옵션 (useQuery)
- select 옵션을 사용해 data 를 변환하는 방법
- qeury 함수가 반환하는 data 를 변환 가능
- 왜 사용? (리액트 쿼리의 최적화 방식)
  - 리액트 쿼리는 불필요한 연산을 줄이기 위해 memoization 사용
  - select 함수를 사용해 삼중 등호로 비교해서 데이터와 함수가 변경될 경우에만 수행
    => 동일한 데이터이고 셀렉트 함수에도 변동이 없으면 셀렉트 함수를 재실행하지 않음.
- 

===
필터링(filtering) 과 리페치(re-fetch)
- filtering 과 refetch 를 통해 기본 옵션 및 변경 방법, 왜 사용하는지

===
리페칭
- 서버가 만료 데이터를 업데이트 하는 것
  => 일정 시간이 지나면 서버가 만료된 데이터를 삭제하는데, 리페칭은 페이지를 벗어났다가 다시 돌아왔을 때 볼 수 있음.
  => stale 시간이 만료되어 다른 화면을 갔다가 해당 페이지를 볼 때 리페칭 작업이 일어남
- stale 쿼리의 자동으로 업데이트 되는 사항
  - 쿼리 키가 처음 호출
  - 쿼리를 호출하는 반응 컴포넌트 증가
  - 창을 재포커싱
  - 만료된 데이터의 업데이트 여부를 확인할 수 있는 네트워크가 다시 연결된 경우
래페칭 하는 방법
- 옵션으로 제어 할 수 있음
- refetchOnMount(boolean), refetchOnWindowFocus(boolean), refetchOnReconnect(boolean), refetchOnInterval(ms)
리페칭 제한 하는 방법
- stale 시간 증가
  => 창을 재포커스 하거나 네트워크에 재연결하는 트리거는 데이터가 실제로 만료된 경우에만 작용함.
- 3가지 boolean 옵션 중 하나 혹은 전체를 끄면 됨.
- 변동이 잦은 않은 데이터에 적용해야함.
- 미세한 변동에도 큰 변화를 불러오는 데이터에는 적용하지 말아야함.

**staleTime 을 cahceTime 보다 작게주면 캐시를 사용하지 않게 되어 불필요한 방식

