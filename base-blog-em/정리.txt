isLoading vs isFetching

isFetching
- 비동기쿼리가 해결되지 않았음을 의미
- 아직 페칭을 완료하지 않았다는 의미
  => 쿼리가 axios 호출 또는 GraphQL 호출일 수 도 있음.

isLoaindg
- isFetching 에 하위 개념
- 가져오는 상태에 있음을 의미
- 캐시 데이터도 없음
 => 해당 쿼리를 만든 적이 없다는 의미로 해당 데이터를 가져오는 중이고 표시할 캐시 데이터도 없음을 의미

==

Stale Time
- 데이터를 허용하는 최대 나이(max age)
 => 데이터가 만료됐다고 판단하기 전까지 허용하는 시간

staleTime vs CacheTime
-staleTime 은 리페칭할 때 고려사항
- 캐시는 나중에 다시 필요할 수 도 있는 데이터
- 캐시가 만료되면 가비지 컬렉션이 실행되고 클라이언트는 데이터를 사용할 수 없음.
=> 데이터가 캐시에 있는 동안은 페칭할 때 사용될 수 있음.

[따로 정리]
- stale time 은 데이터가 사용 가능한 상태로 유지되는 시간.
  서버로 돌아가 데이터가 여전히 정확한지 확인하는 시점!
- cache time 은 데이터가 비활성화된 이후 남아있는 시간.
  캐시된 데이터는 쿼리를 다시 실행했을때 사용됨.
=> stale time 은 실제 서버한테 요청까지의 시간이고, cache time 은 데이터가 남아있는 유효시간?

===

Prefetch
- 데이터를 미리 가져와 캐시에 넣어서 사용자가 기다릴 필요 없이!
=> 이전에는 loading 때문에 UX 가 별로였음
- 데이터를 캐시에 추가하며 구성할 수 있지만 기본값으로 만료상태임
=> 데이터를 사용하고자 할 때 만료 상태에서 데이터를 다시 가져옴
- prefetching은 추후 사용자가 사용할 법한 모든 데이터에 프리페칭을 사용함.
 => 다수의 사용자가 특정 탭을 누를 확률이 높다면 해당 데이터를 미리 가져오는게 좋음!
- 해당 기능은 queryClient 기능으로 useQueryClient 훅을 통해 가져올 수 있음.

===
isFetching 과 isLoading (isFetching 의 부분 집합 (isLoaidng))
- isFetching은 async 쿼리함수가 해결되지 않을때 참이되는 경우로, 아직 데이터를 가져오는 중!
- isLoading 은 isFetching 이 참이면서 쿼리에 대해 캐시된 데이터가 없는 상태
  => 즉 isLoading 은 캐시된 데이터가 없고 데이터를 가져오는 경우에 해당함.
  => 따라서 isLoading 이 아닌 isFetching 으로 데이터 존재 여부를 나타내면 로딩 인디케이터가 나타남.
- 프리패치의 목적은 캐시된 데이터를 표시하면서 배경에서는 데이터의 업데이트 여부를 조용히 서버에서 확인하는 것!
  그리고 데이터가 업데이트된 경우 해당 데이터를 페이지에 보여줌.


===
mutation
- 서버에 데이터를 업데이트하도록 서버에 네트워크 호출을 실시함.
- useQuery 와 다른 점
  - 데이터를 저장하지 않으므로 쿼리 키 필요없음
  - 캐시된 황목이 없으므로 isLoading 만 존재 (isFetching 존재하지 않음.)
  - 재시도 또한 기본값으로 존재하지 않음 (설정은 가능)
  








